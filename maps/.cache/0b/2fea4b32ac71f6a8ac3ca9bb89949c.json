{"id":"src/index.ts","dependencies":[{"name":"/Users/david/development/microservices-node-react-udemy/learn-typescript/maps/package.json","includedInParent":true,"mtime":1594279802310}],"generated":{"js":"// Because we're adding google maps as a script directly into our index.html, rather than what we'd normally do in TS (adding dependencies via\n// npm and importing them), `google` is available as a global variable throughout our project. But, TS doesn't KNOW about this yet, or about\n// the different methods and properties of this `google` object. To help TS understand how this third-party JS library works, we're going to install\n// another type definition file, @types/googlemaps.\n// The below is a part of typescript and is called a triple slash directive. Triple-slash directives are single-line comments containing\n// a single XML tag. The contents of the comment are used as compiler directives. I needed to add this because TS didn't automatically\n// use the @types/googlemaps type definition file.\n/// <reference types=\"@types/googlemaps\" />\n// For module imports, when do we use curly braces for import statements? If, in the exporting file, we only use `export`, then we need to use curly braces in the\n// importing file. That also allows us to safely import more than one object from the exporting file, by e.g. `{ User, House }`. I believe this is\n// plain ES2015, and that's why it's also in react; and I believe TS just replicates this. If we use the default keyword, as in `export default`,\n// then we don't need to put curly braces. The exporting file will then just export whatever we assigned to the `default` keyword.\n// Note that in the importing file, we don't have to call it the same name - we can import the `default` exported object under a different name.\n// This is because, we also don't give a NAME to what we export in `export default` - we essentially just say \"export by default the following thing: ...\"\n// This is different with just `export`, where we give a name to what we export.\n// Note that in TS world, convention is to NOT use the `default` keyword, and therefore always use curly braces.\n// import { User } from \"./User\";\n// import { Company } from \"./Company\";\n// The @types/googlemaps index.d.ts file served us a documentation that `google.maps.Map()` requires 1-2 arguments, one of them an HTML element\n// that serves the map to be rendered. So we created such an element in index.html and are now referencing it as an argument via a `document` selector.\n// Hovering over `.Map` gives us the definition, and we can go to the index.d.ts file by command-clicking. From the definition, we understand\n// that the second, optional parameter is an options object.\nnew google.maps.Map(document.getElementById(\"map\"), {\n  zoom: 1,\n  center: {\n    lat: 0,\n    lng: 0\n  }\n});"},"sourceMaps":{"js":{"mappings":[{"source":"src/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":5,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":6,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":7,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":8,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":9,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":10,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":12,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":13,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":14,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":15,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":16,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":17,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":18,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":19,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":20,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":21,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":22,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":23,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":23,"column":4}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":10},"generated":{"line":23,"column":10}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":11},"generated":{"line":23,"column":11}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":23,"column":15}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":16},"generated":{"line":23,"column":16}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":23,"column":19}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":23,"column":20}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":28},"generated":{"line":23,"column":28}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":29},"generated":{"line":23,"column":29}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":23,"column":43}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":44},"generated":{"line":23,"column":44}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":20},"generated":{"line":23,"column":49}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":23,"column":50}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":23,"column":52}},{"source":"src/index.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":24,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":24,"column":2}},{"source":"src/index.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":24,"column":6}},{"source":"src/index.ts","name":null,"original":{"line":27,"column":8},"generated":{"line":24,"column":8}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":24,"column":9}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":25,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":25,"column":2}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":8},"generated":{"line":25,"column":8}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":25,"column":10}},{"source":"src/index.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":26,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":26,"column":4}},{"source":"src/index.ts","name":null,"original":{"line":29,"column":7},"generated":{"line":26,"column":7}},{"source":"src/index.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":26,"column":9}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":26,"column":10}},{"source":"src/index.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":27,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":27,"column":4}},{"source":"src/index.ts","name":null,"original":{"line":30,"column":7},"generated":{"line":27,"column":7}},{"source":"src/index.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":27,"column":9}},{"source":"src/index.ts","name":null,"original":{"line":28,"column":10},"generated":{"line":28,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":52},"generated":{"line":29,"column":0}},{"source":"src/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":29,"column":1}}],"sources":{"src/index.ts":"// Because we're adding google maps as a script directly into our index.html, rather than what we'd normally do in TS (adding dependencies via\n// npm and importing them), `google` is available as a global variable throughout our project. But, TS doesn't KNOW about this yet, or about\n// the different methods and properties of this `google` object. To help TS understand how this third-party JS library works, we're going to install\n// another type definition file, @types/googlemaps.\n\n// The below is a part of typescript and is called a triple slash directive. Triple-slash directives are single-line comments containing\n// a single XML tag. The contents of the comment are used as compiler directives. I needed to add this because TS didn't automatically\n// use the @types/googlemaps type definition file.\n/// <reference types=\"@types/googlemaps\" />\n\n// For module imports, when do we use curly braces for import statements? If, in the exporting file, we only use `export`, then we need to use curly braces in the\n// importing file. That also allows us to safely import more than one object from the exporting file, by e.g. `{ User, House }`. I believe this is\n// plain ES2015, and that's why it's also in react; and I believe TS just replicates this. If we use the default keyword, as in `export default`,\n// then we don't need to put curly braces. The exporting file will then just export whatever we assigned to the `default` keyword.\n// Note that in the importing file, we don't have to call it the same name - we can import the `default` exported object under a different name.\n// This is because, we also don't give a NAME to what we export in `export default` - we essentially just say \"export by default the following thing: ...\"\n// This is different with just `export`, where we give a name to what we export.\n// Note that in TS world, convention is to NOT use the `default` keyword, and therefore always use curly braces.\n// import { User } from \"./User\";\n// import { Company } from \"./Company\";\n\n// The @types/googlemaps index.d.ts file served us a documentation that `google.maps.Map()` requires 1-2 arguments, one of them an HTML element\n// that serves the map to be rendered. So we created such an element in index.html and are now referencing it as an argument via a `document` selector.\n// Hovering over `.Map` gives us the definition, and we can go to the index.d.ts file by command-clicking. From the definition, we understand\n// that the second, optional parameter is an options object.\nnew google.maps.Map(document.getElementById(\"map\"), {\n  zoom: 1,\n  center: {\n    lat: 0,\n    lng: 0,\n  },\n});\n"},"lineCount":null}},"error":null,"hash":"24752fbd74f5409ee7ea2cb0ce722534","cacheData":{"env":{}}}